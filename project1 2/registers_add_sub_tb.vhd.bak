library IEEE;
use IEEE.std_logic_1164.ALL;
use IEEE.std_logic_arith.ALL;
use IEEE.numeric_std .ALL;

library work;
use work.my_components.ALL;

entity registers_add_sub_tb is
end registers_add_sub_tb;

architecture registers_add_sub_tb_arch of registers_add_sub_tb is

component register_file is
	generic(N: integer := 32);
	port(
		RegWr: in std_logic;
		Rw: in std_logic_vector( 4 downto 0);
		Ra: in std_logic_vector( 4 downto 0);
		Rb: in std_logic_vector( 4 downto 0);
		Clk: in std_logic;
		busW: in std_logic_vector( N-1 downto 0);
		busA: out std_logic_vector( N-1 downto 0);
		busB: out std_logic_vector( N-1 downto 0)
	);
end component;

component nbit_add_sub is
	 Generic(
		N: integer := 32
	 );
    Port ( A : in  std_logic_vector(N-1 downto 0);
           B : in  std_logic_vector(N-1 downto 0);
			  CarryIn: in std_logic;
			  Add_Sub: in std_logic;
           Sum : out  std_logic_vector(N-1 downto 0);
           CarryOut : out  std_logic;
			  overflow : out  std_logic
			  );
end component;


component mux_2to1 is
    Port ( 
        sel : in  std_logic; 
        data : in  std_logic_2d_2_32; 
        result : out std_logic_vector(31 downto 0)
    );
end component;


signal Clk: std_logic;
signal MemToReg: std_logic := '0';
signal mem_reg_data: std_logic_2d_2_32 := (others => (others=>'0'));
signal busA_signal, busB_signal, busW_signal: std_logic_vector(31 downto 0) := (others=>'0');
signal RegWr, add_sub, Cout, Overflow: std_logic := '0';
signal Rw, Ra, Rb: std_logic_vector( 4 downto 0) := (others=>'0');
signal result: std_logic_vector( 31 downto 0) := (others=>'0');

begin

	clock_process: process
	begin
		Clk <='1';
		wait for 5 ns;
		Clk <='0';
		wait for 5 ns;
	end process;
	
	mux2_1: mux_2to1
    port map( 
        sel =>  MemToReg,
        data =>  mem_reg_data,
        result => busW_signal
    );
	

	registerF: register_file port map(
		RegWr,
		Rw,
		Ra,
		Rb,
		Clk,
		busW_signal,
		busA_signal,
		busB_signal
		
	);
	
	
	adder: nbit_add_sub port map(
		busA_signal,
		busB_signal,
		'0',
		add_sub,
		mem_reg_data(0),
		Cout,
		Overflow
		
	);

	
	
	result <= mem_reg_data(0);
	
	
	instructions_process: process
	begin
		-- initialize some registers with values
		RegWr <='1';
		MemToReg <= '1';
		Rw <= std_logic_vector(to_unsigned(16#12#,Rw'length));
		Ra <= std_logic_vector(to_unsigned(16#12#,Ra'length));
		Rb <= std_logic_vector(to_unsigned(16#12#,Ra'length));
--		Rw <= to_stdlogicvector(x"12")(4 downto 0);
		mem_reg_data(1) <= std_logic_vector(to_unsigned(16#00000203#,busW_signal'length));
--		busW_signal <= to_stdlogicvector(x"00000203")(31 downto 0);
		wait for 10 ns;
		
		RegWr <='0';
--		Rw <= std_logic_vector(to_unsigned(16#11#,Rw'length));
--		Rw <= to_stdlogicvector(x"11")(4 downto 0);
--		busW_signal <= std_logic_vector(to_unsigned(16#00000203#,busW_signal'length));
--		busW_signal <= to_stdlogicvector(x"00000203")(31 downto 0);
		wait for 10 ns;
--		wait;
		
	end process;
	
	
	

end registers_add_sub_tb_arch;